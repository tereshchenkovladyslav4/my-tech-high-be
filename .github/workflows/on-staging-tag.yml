name: Deploy To Staging

on:
  push:
    tags:
      - staging
      - 'staging/*'

jobs:
  generate-tag:
    name: Generate Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_name.outputs.tag_name }}
    steps:
      - name: Generate Tag Name
        id: tag_name
        run: echo "::set-output name=tag_name::$(date --rfc-3339=date)_${GITHUB_SHA::7}"

  build-application-service:
    name: Build Application Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Applications App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:applications-app ./applications-app/
          docker push $REGISTRY/$REPOSITORY:applications-app
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-applications-app
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  build-authentication-service:
    name: Build Authentication Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Authentication App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:authentication ./authentication/
          docker push $REGISTRY/$REPOSITORY:authentication
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-authentication
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  build-students-service:
    name: Build Students Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Students App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:students-app ./students-app/
          docker push $REGISTRY/$REPOSITORY:students-app
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-students-app
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  build-users-service:
    name: Build Users Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Users App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:users-app ./users-app/
          docker push $REGISTRY/$REPOSITORY:users-app
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-users
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  build-media-service:
    name: Build Media Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Media App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:media-app ./media-app/
          docker push $REGISTRY/$REPOSITORY:media-app
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-media-app
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  build-gateway-service:
    name: Build Gateway Service
    runs-on: ubuntu-latest
    needs: [build-application-service, build-authentication-service, build-students-service, build-users-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Gateway App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:gateway ./gateway/
          docker push $REGISTRY/$REPOSITORY:gateway
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        env:
          ECS_CLUSTER: infocenter-v2-be--staging
          ECS_SERVICE: staging-gateway
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-staging

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Failed!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() || cancelled() }}

  send-slack-success-message:
    name: Send Slack Success Message
    runs-on: ubuntu-latest
    needs:
      [
        generate-tag,
        build-application-service,
        build-authentication-service,
        build-students-service,
        build-users-service,
        build-gateway-service,
        build-media-service,
      ]
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: 'Backend Deployment to Staging Successful!',
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
