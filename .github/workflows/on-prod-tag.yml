name: Deploy To Prod

on:
  push:
    tags:
      - prod
      - 'prod/*'

jobs:
  generate-tag:
    name: Generate Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_name.outputs.tag_name }}
    steps:
      - name: Generate Tag Name
        id: tag_name
        run: echo "::set-output name=tag_name::$(date --rfc-3339=date)_${GITHUB_SHA::7}"

  build-applications-service:
    name: Build Applications Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Applications App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:applications-app ./applications-app/
          docker push $REGISTRY/$REPOSITORY:applications-app
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-applications-app" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod

  build-authentication-service:
    name: Build Authentication Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Authentication App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:authentication ./authentication/
          docker push $REGISTRY/$REPOSITORY:authentication
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-authentication" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod

  build-students-service:
    name: Build Students Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Students App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:students-app ./students-app/
          docker push $REGISTRY/$REPOSITORY:students-app
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-students-app" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod

  build-users-service:
    name: Build Users Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Users App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:users-app ./users-app/
          docker push $REGISTRY/$REPOSITORY:users-app
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-users-app" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod

  build-media-service:
    name: Build Media Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Media App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:media-app ./media-app/
          docker push $REGISTRY/$REPOSITORY:media-app
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-media-app" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod

  build-gateway-service:
    name: Build Gateway Service
    runs-on: ubuntu-latest
    needs: [build-application-service, build-authentication-service, build-students-service, build-users-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Gateway App
        run: |
          docker build -t $REGISTRY/$REPOSITORY:gateway ./gateway/
          docker push $REGISTRY/$REPOSITORY:gateway
          OLD_TASK_ID=$(aws ecs list-tasks --cluster $ECS_CLUSTER  --service "prod-gateway" --desired-status RUNNING | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
          aws ecs stop-task --cluster $ECS_CLUSTER --task ${OLD_TASK_ID}
        env:
          ECS_CLUSTER: infocenter-v2-be--prod
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: infocenter-v2-be-prod
